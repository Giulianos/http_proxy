#include <protocol/protocol.h>
#include <handlers/handlers.h>
#include <bits/signum.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/param.h>
#include <netinet/in.h>
#include <netinet/sctp.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <errno.h>
#include <msg_queue/msg_queue.h>
#include <print_queue/print_queue.h>
#include <actions/actions.h>

int
main(const int argc, const char * argv[])
{
  const char *err_msg = NULL;
  int return_value;
  int admin_socket;
  struct sockaddr_in addr;
  struct sockaddr_in peer;
  struct sctp_event_subscribe events;
  struct sctp_sndrcvinfo sri;

  admin_socket = socket(AF_INET, SOCK_SEQPACKET, IPPROTO_SCTP);
  if(admin_socket < 0) {
    err_msg = "creating socket";
    printf("%s\n", err_msg);
    return 1;
  }
  bzero(&addr, sizeof(addr));
  addr.sin_family      = AF_INET;
  addr.sin_addr.s_addr = htonl(INADDR_ANY);
  addr.sin_port        = htons(ADMIN_PORT);
  return_value = inet_pton(AF_INET,"127.0.0.1", &addr.sin_addr);
  if(return_value <= 0) {
    err_msg = "inet_pton";
    printf("%s\n", err_msg);
    return 1;
  }
  bzero(&events, sizeof(events));
  events.sctp_data_io_event = 1;
  return_value = setsockopt(admin_socket, IPPROTO_SCTP, SCTP_EVENTS, &events, sizeof(events));
  if(return_value < 0) {
    err_msg = "setting socket options";
    printf("%s\n", err_msg);
    return 1;
  }
  bzero(&sri, sizeof(sri));
  sri.sinfo_stream = 0;
  struct addr_data admin_data = {
      .addr       = (struct sockaddr *)&addr,
      .addr_len        = sizeof(addr),
      .sri        = &sri,
      .peer       = &peer,
      .peer_len   = sizeof(peer),
  };

  char buffer[MAX_READ];
  static char param1[MAX_READ];
  static char param2[MAX_READ];
  enum state{START = 0, CRED, GMETRIC, GCONFIG, SCONFIG, PROTERROR, CLOSE};
  int should_close = 0;
  int i = 0;
  int j = 0;

  switch(atoi(argv[1])) {
    case GET_METRIC:
      break;
    case GET_CONFIG:
      printf("Requesting config %s\n", argv[2]);
      req_get_config(&admin_data, admin_socket, (unsigned char)atoi(argv[2]));
      break;
    case SET_CONFIG:
      printf("Setting config %s to %s\n", argv[2], argv[3]);
      req_set_config(&admin_data, admin_socket, (unsigned char)atoi(argv[2]), (unsigned char *)argv[3]);
      break;
    case LIST_CONFIGS:
      printf("Requesting configs\n");
      req_list_configs(&admin_data, admin_socket);
      break;
    case LIST_METRICS:
      break;
  }

  return 0;
}
